
#Choose ranking of Average Annual Sunshine 1-10. 10 being the best
SunRank <- 1
#Choose ranking of Residential Electricity Costs 1-10. 10 being the best
ResRank <- 2
#Choose ranking of Diesel Prices 1-10. 10 being the best
DieselRank <- 3
#Choose ranking of Property Tax 1-10. 10 being the best
PropTaxRank <- 4
#Choose ranking of Corporate Tax 1-10. 10 being the best
CorpTaxRank <- 5
#Choose ranking of Sales Tax 1-10. 10 being the best
SalesTaxRank <- 6
#Choose ranking of Unemployment Rate 1-10. 10 being the best
UnemployRank <- 9


#pull in possible packages needed
if(!require("shiny"))
  install.packages("shiny")
if(!require("readr"))
  install.packages("readr")
if(!require("readxl"))
  install.packages("readxl")
if(!require("caret"))
  install.packages("caret")
if(!require("e1071"))
  install.packages("e1071")
if(!require("svDialogs"))
  install.packages("svDialogs")
if(!require("shinydashboard"))
  install.packages("shinydashboard")
if(!require("data.table"))
  install.packages("data.table")
if(!require("factoextra"))
  install.packages("factoextra")

#Pull in all possible data needed. historical and present included
Data2017 <- read_xlsx("Historical Data.xlsx", sheet = 2, col_names = TRUE)
Data2016 <- read_xlsx("Historical Data.xlsx", sheet = 3, col_names = TRUE)
Data2015 <- read_xlsx("Historical Data.xlsx", sheet = 4, col_names = TRUE)
Data2014 <- read_xlsx("Historical Data.xlsx", sheet = 5, col_names = TRUE)
Data2018 <- as.data.frame(read_xlsx("Historical Data.xlsx", sheet = 1, col_names = TRUE))

#Define Column Names
Data2018 <- setNames(Data2018, c("State","ResCost", "PropTax", "CorpTax", "SalesTax", "Unemploy", "Sun", "Diesel"))
Data2017 <- setNames(Data2017, c("State17","ResCost17", "PropTax17", "CorpTax17", "SalesTax17", "Unemploy17", "Sun17", "Diesel17"))
Data2016 <- setNames(Data2016, c("State16","ResCost16", "PropTax16", "CorpTax16", "SalesTax16", "Unemploy16", "Sun16", "Diesel16"))
Data2015 <- setNames(Data2015, c("State15","ResCost15", "PropTax15", "CorpTax15", "SalesTax15", "Unemploy15", "Sun15", "Diesel15"))
Data2014 <- setNames(Data2014, c("State14","ResCost14", "PropTax14", "CorpTax14", "SalesTax14", "Unemploy14", "Sun14", "Diesel14"))

#Sort in alphabetical order according to state
Data2017 <- Data2017[order(Data2017$State17),]
Data2016 <- Data2016[order(Data2016$State16),]
Data2015 <- Data2015[order(Data2015$State15),]
Data2014 <- Data2014[order(Data2014$State14),]

#Combine historical data into one dataframe
HistData <- cbind(Data2017, Data2016[,-1], Data2015[,-1], Data2014[,-1])

#Name first column
colnames(Data2018)[1] <- "State"
colnames(HistData)[1] <- "State"

#Make row names the values for column 1
rownames(Data2018) <- Data2018[,1]
rownames(HistData) <- HistData[,1]

#Remove column 1
Data2018 <- Data2018[,-1]
HistData <- HistData[,-1]

#Scale historical data
HistData2 <- scale(HistData)

#Run Hierarchal clustering on the scaled historical data
HistHier <- eclust(HistData2, "hclust", k = 5, method = "ward.D2", graph = FALSE)

#Define Cluster column
HistHierGrp <- HistHier$cluster

#Average the clusters made
HistHierCenters <- aggregate(HistData2, list(HistHierGrp), mean)

#Remove first column of averaged clusters
HistHierCenters <- HistHierCenters[,-1]

#Run kmeans clustering on historical data using hierarchal means as k
Histkmean <- eclust(HistData2, "kmeans", k = HistHierCenters, graph = FALSE)

#Define cluster column
HistkmeanGrp <- Histkmean$cluster

#Create data frame combinine historical data and clusters
Histdata.2 <- cbind(HistData, Cluster = Histkmean$cluster)

#Find means of each cluster and variable
HistKmeansCenters <- aggregate(HistData, list(HistkmeanGrp), mean)

#Make row names the cluster numbers
rownames(HistKmeansCenters) <- HistKmeansCenters[,1]

#Remove cluster column
HistKmeansCenters <- HistKmeansCenters[,-1]

#Create data frame of averages of every year's variable
Histdata.3 <- as.data.frame(cbind(ResCost = ((Histdata.2$ResCost17 + Histdata.2$ResCost16 + Histdata.2$ResCost15 + Histdata.2$ResCost14)/4), 
                                  PropTax = ((Histdata.2$PropTax17 + Histdata.2$PropTax16 + Histdata.2$PropTax15+Histdata.2$PropTax14)/4), 
                                  CorpTax = ((Histdata.2$CorpTax17+Histdata.2$CorpTax16+Histdata.2$CorpTax15+Histdata.2$CorpTax14)/4),
                                  SalesTax = ((Histdata.2$SalesTax17+Histdata.2$SalesTax16+Histdata.2$SalesTax15+Histdata.2$SalesTax14)/4),
                                  Unemploy = ((Histdata.2$Unemploy17+Histdata.2$Unemploy16+Histdata.2$Unemploy15+Histdata.2$Unemploy14)/4),
                                  Sun = ((Histdata.2$Sun17+Histdata.2$Sun16+Histdata.2$SalesTax15+Histdata.2$Sun14)/4),
                                  Diesel = ((Histdata.2$Diesel17+Histdata.2$Diesel16+Histdata.2$Diesel15+Histdata.2$Diesel14)/4),
                                  Cluster = Histdata.2$Cluster))

#Create data frame averaging the clusters for every year
FinalData <- as.data.frame(cbind(ResCost = ((HistKmeansCenters$ResCost17 + HistKmeansCenters$ResCost16 + HistKmeansCenters$ResCost15 + HistKmeansCenters$ResCost14)/4), 
                                 PropTax = ((HistKmeansCenters$PropTax17 + HistKmeansCenters$PropTax16 + HistKmeansCenters$PropTax15+HistKmeansCenters$PropTax14)/4), 
                                 CorpTax = ((HistKmeansCenters$CorpTax17+HistKmeansCenters$CorpTax16+HistKmeansCenters$CorpTax15+HistKmeansCenters$CorpTax14)/4),
                                 SalesTax = ((HistKmeansCenters$SalesTax17+HistKmeansCenters$SalesTax16+HistKmeansCenters$SalesTax15+HistKmeansCenters$SalesTax14)/4),
                                 Unemploy = ((HistKmeansCenters$Unemploy17+HistKmeansCenters$Unemploy16+HistKmeansCenters$Unemploy15+HistKmeansCenters$Unemploy14)/4),
                                 Sun = ((HistKmeansCenters$Sun17+HistKmeansCenters$Sun16+HistKmeansCenters$SalesTax15+HistKmeansCenters$Sun14)/4),
                                 Diesel = ((HistKmeansCenters$Diesel17+HistKmeansCenters$Diesel16+HistKmeansCenters$Diesel15+HistKmeansCenters$Diesel14)/4)))

#Rank each cluster based on weightings chosen in beginning
FinalData$Rank <- FinalData$ResCost*ResRank + 
  FinalData$PropTax * -PropTaxRank + 
  FinalData$CorpTax * - CorpTaxRank +
  FinalData$SalesTax * -SalesTaxRank +
  FinalData$Unemploy * -UnemployRank +
  FinalData$Sun * SunRank +
  FinalData$Diesel * DieselRank

#Put Final data in descending order by rank
FinalData <- FinalData[order(-FinalData$Rank),]

#Add historical cluster to Data2018
Data2018 <- cbind(Data2018, Cluster = Histdata.3$Cluster)

#Treat as factor
as.factor((Data2018$Cluster))

#Create k-nearest-neighor-model based on the clusters of historical data
model1 <- train(Cluster~., data = Histdata.3, method = "knn",
                preProcess = c("center", "scale"), tunelength = 20)

#Predict clusters of 2018 data by running knn model on 2018 data
Data2018_pred <- round(predict(model1, newdata = Data2018), digits = 0)

#Add predicted cluster to 2018 data
Data2018 <- cbind(Data2018, Pred_Cluster = Data2018_pred)

#Create column states based on rownames
Data2018 <- cbind(State = rownames(Data2018), Data2018)

#Sort 2018 data by predicted cluster
Data2018 <- Data2018[order(Data2018$Pred_Cluster),]

#Add cluster column to final data
FinalData <- cbind(Cluster = rownames(FinalData), FinalData)

#Find best cluster by choosing value in first row and first column
BestCluster = FinalData[1,1]

#Create data frame of states in the best cluster
Data2018pot <- Data2018[which(Data2018$Pred_Cluster == BestCluster),]

#Remove cluster column from potential cadidates
Data2018pot$Cluster <- NULL

#Create weightings data frame for shiny output
Weightings <- data.frame(
  Variable = c("Sunshine", "Corporate Tax", "Sales Tax", "Diesel Price", "Property Tax", "Residential Electric Cost", "Unemloyment"),
  Weighting = c(SunRank, CorpTaxRank, SalesTaxRank, DieselRank, PropTaxRank, ResRank, UnemployRank))

#Add row names to Histdata.3
Histdata.3 <- cbind(State = rownames(Histdata.2), Histdata.3)

#Create bar chart based on historical sunshine data
histplotsun <- ggplot(data = Histdata.3, aes(x=State, y=Sun, fill = Cluster)) + geom_bar(stat="identity") + theme(axis.text.x=element_text(angle = -90, hjust = 0))

#Create plots for multiple variables on Final Data
finalplotsun <- ggplot(data = FinalData, aes(x = Cluster, y=Sun, fill = Cluster)) + geom_bar(stat="identity") 
finalplotresCost <- ggplot(data = FinalData, aes(x = Cluster, y=ResCost, fill = Cluster)) + geom_bar(stat="identity")
finalplotproptax <- ggplot(data = FinalData, aes(x = Cluster, y=PropTax, fill = Cluster)) + geom_bar(stat="identity")
finalplotcorptax <- ggplot(data = FinalData, aes(x = Cluster, y=CorpTax, fill = Cluster)) + geom_bar(stat="identity")
finalplotsalestax <- ggplot(data = FinalData, aes(x = Cluster, y=salesTax, fill = Cluster)) + geom_bar(stat="identity")
finalplotunemploy <- ggplot(data = FinalData, aes(x = Cluster, y=Unemploy, fill = Cluster)) + geom_bar(stat="identity")
finalplotdiesel <- ggplot(data = FinalData, aes(x = Cluster, y=Diesel, fill = Cluster)) + geom_bar(stat="identity")

#Create header for shiny dashboard
header <- dashboardHeader(title = "Sun City's HQ2")
sidebar <- dashboardSidebar(
  sidebarMenu(
    menuItem("Historical Data",
             tabName = "data"),
    menuItem("Ranked Clusters",
             tabName = "inputs"),
    menuItem("Potential Candidates",
             tabName = "outputs")
  )
)
body <- dashboardBody(
  tabItems(
    tabItem(tabName ="inputs",
            fluidRow(
              box(title = "Final Clustered Data",
                  tableOutput("clustereddata"), width = 1000)),
            fluidRow(
              box(title = "Sunshine Distribution",
                  plotOutput("sunplot"))),
            fluidRow(
              box(title = "Residential Cost Distribution",
                  plotOutput("resplot"))),
            fluidRow(
              box(title = "Corporate Tax Distribution",
                  plotOutput("corpplot"))),
            fluidRow(
              box(title = "Diesel Price Distribution",
                  plotOutput("diesplot")))
    ),
    
    tabItem(tabName ="data",
            fluidRow(
              box(title = "Historical Bar Chart of Sunshine",
                  plotOutput("histplot"), width = 1500)),
            fluidRow(
              box(title = "Historical Data Overview",
                  tableOutput("histdata"), width = 1000))),
    tabItem(tabName ="outputs",
            fluidRow(
              box(title = "Final Potential Candidates",
                  tableOutput("potcand"), width = 1000))))
)      



ui3 <- dashboardPage(header, sidebar, body)
server3 <- function(input, output) {
  output$clustereddata <- renderTable({head(FinalData)})
  output$histdata <- renderTable({Histdata.3})
  output$histplot <- renderPlot({histplotsun})
  output$sunplot <- renderPlot({finalplotsun})
  output$resplot <- renderPlot({finalplotresCost})
  output$propplot <- renderPlot({finalplotproptax})
  output$corpplot <- renderPlot({finalplotcorptax})
  output$diesplot <- renderPlot({finalplotdiesel})
  output$potcand <- renderTable({Data2018pot})
  
}
shinyApp(ui = ui3, server = server3)
